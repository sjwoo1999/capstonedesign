import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../providers/vad_provider.dart';
import '../../providers/cbt_provider.dart';
import '../../theme/bemore_theme.dart';
import '../../services/mock_analysis_service.dart';
import '../../models/emotion_data_point.dart';
import '../home/home_screen.dart';
import 'dart:convert';

class AnalysisResultScreen extends StatefulWidget {
  final List<EmotionDataPoint> sessionData;
  
  const AnalysisResultScreen({
    super.key,
    required this.sessionData,
  });

  @override
  State<AnalysisResultScreen> createState() => _AnalysisResultScreenState();
}

class _AnalysisResultScreenState extends State<AnalysisResultScreen> {
  Map<String, dynamic>? _analysisResult;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _performAnalysis();
  }

  void _performAnalysis() {
    // Mock Î∂ÑÏÑù ÏÑúÎπÑÏä§Î•º ÏÇ¨Ïö©ÌïòÏó¨ Ï¶âÏãú Î∂ÑÏÑù ÏàòÌñâ
    final result = MockAnalysisService.analyzeSessionData(widget.sessionData);
    setState(() {
      _analysisResult = result;
      _isLoading = false;
    });
    
    print('üìä Î∂ÑÏÑù ÏôÑÎ£å: ${jsonEncode(result)}');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: BeMoreTheme.backgroundColor,
      appBar: AppBar(
        title: const Text('Î∂ÑÏÑù Í≤∞Í≥º'),
        backgroundColor: BeMoreTheme.surfaceColor,
        elevation: 0,
        automaticallyImplyLeading: false,
      ),
      body: SafeArea(
        child: _isLoading 
          ? const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(),
                  SizedBox(height: 16),
                  Text('Î∂ÑÏÑù Ï§ë...', style: TextStyle(fontSize: 16)),
                ],
              ),
            )
          : SingleChildScrollView(
              padding: const EdgeInsets.all(24.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Í≤∞Í≥º Ìó§Îçî
                  _buildResultHeader(context),
                  
                  const SizedBox(height: 24),
                  
                  // VAD Ï∞®Ìä∏
                  _buildVADChart(context),
                  
                  const SizedBox(height: 24),
                  
                  // Í∞êÏ†ï Î∂ÑÏÑù Í≤∞Í≥º
                  _buildEmotionAnalysis(context),
                  
                  const SizedBox(height: 24),
                  
                  // CBT ÌîºÎìúÎ∞±
                  _buildCBTFeedback(context),
                  
                  const SizedBox(height: 24),
                  
                  // Í∞úÏÑ† Ï†úÏïà
                  _buildRecommendations(context),
                  
                  const SizedBox(height: 32),
                  
                  // Ïï°ÏÖò Î≤ÑÌäº
                  _buildActionButtons(context),
                ],
              ),
            ),
      ),
    );
  }

  Widget _buildResultHeader(BuildContext context) {
    if (_analysisResult == null) return const SizedBox.shrink();
    
    final analysis = _analysisResult!['analysis'] as Map<String, dynamic>;
    final emotionCategory = analysis['emotionCategory'] as String;
    final emotionIconCode = analysis['emotionIcon'] as int;
    final confidence = analysis['confidence'] as double;
    final dataPoints = analysis['dataPoints'] as int;
    
    final emotionColor = BeMoreTheme.emotionColors[emotionCategory] ?? BeMoreTheme.textSecondary;

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          children: [
            // Í∞êÏ†ï ÏïÑÏù¥ÏΩò
            Container(
              width: 80,
              height: 80,
              decoration: BoxDecoration(
                color: emotionColor.withOpacity(0.1),
                shape: BoxShape.circle,
              ),
              child: Icon(
                IconData(emotionIconCode, fontFamily: 'MaterialIcons'),
                size: 40,
                color: emotionColor,
              ),
            ),
            
            const SizedBox(height: 16),
            
            // Í∞êÏ†ï Ïπ¥ÌÖåÍ≥†Î¶¨
            Text(
              _getEmotionDisplayName(emotionCategory),
              style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                fontWeight: FontWeight.bold,
                color: emotionColor,
              ),
            ),
            
            const SizedBox(height: 8),
            
            // Î∂ÑÏÑù Ï†ïÎ≥¥
            Text(
              '${DateTime.now().hour.toString().padLeft(2, '0')}:${DateTime.now().minute.toString().padLeft(2, '0')} Î∂ÑÏÑù ÏôÑÎ£å',
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: BeMoreTheme.textSecondary,
              ),
            ),
            
            const SizedBox(height: 4),
            
            // Ïã†Î¢∞ÎèÑ Î∞è Îç∞Ïù¥ÌÑ∞ Ìè¨Ïù∏Ìä∏
            Text(
              'Ïã†Î¢∞ÎèÑ: ${(confidence * 100).toInt()}% | Îç∞Ïù¥ÌÑ∞: ${dataPoints}Í∞ú',
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: BeMoreTheme.textSecondary,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildVADChart(BuildContext context) {
    if (_analysisResult == null) return const SizedBox.shrink();
    
    final vadStats = _analysisResult!['vadStats'] as Map<String, dynamic>;
    final valence = vadStats['valence'] as double;
    final arousal = vadStats['arousal'] as double;
    final dominance = vadStats['dominance'] as double;

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'VAD Í∞êÏ†ï Î∂ÑÏÑù',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            
            const SizedBox(height: 20),
            
            // VAD Î∞î Ï∞®Ìä∏
            _buildVADBar(context, 'Valence (Í∏çÏ†ïÏÑ±)', valence, BeMoreTheme.successColor),
            const SizedBox(height: 12),
            _buildVADBar(context, 'Arousal (ÌôúÏÑ±Ìôî)', arousal, BeMoreTheme.warningColor),
            const SizedBox(height: 12),
            _buildVADBar(context, 'Dominance (ÏßÄÎ∞∞ÏÑ±)', dominance, BeMoreTheme.primaryColor),
          ],
        ),
      ),
    );
  }

  Widget _buildVADBar(BuildContext context, String label, double value, Color color) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              label,
              style: const TextStyle(
                fontWeight: FontWeight.w500,
                fontSize: 14,
              ),
            ),
            Text(
              '${(value * 100).toInt()}%',
              style: TextStyle(
                fontWeight: FontWeight.w600,
                color: color,
                fontSize: 14,
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        Container(
          width: double.infinity,
          height: 8,
          decoration: BoxDecoration(
            color: Colors.grey.shade200,
            borderRadius: BorderRadius.circular(4),
          ),
          child: FractionallySizedBox(
            alignment: Alignment.centerLeft,
            widthFactor: ((value + 1) / 2).clamp(0.0, 1.0),
            child: Container(
              decoration: BoxDecoration(
                color: color,
                borderRadius: BorderRadius.circular(4),
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildEmotionAnalysis(BuildContext context) {
    if (_analysisResult == null) return const SizedBox.shrink();
    
    final emotionPattern = _analysisResult!['emotionPattern'] as Map<String, dynamic>;
    final stability = emotionPattern['stability'] as String;
    final volatility = emotionPattern['volatility'] as String;
    final trend = emotionPattern['trend'] as String;
    final keyMoments = emotionPattern['keyMoments'] as List<dynamic>;
    
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Í∞êÏ†ï Î≥ÄÌôî Ìå®ÌÑ¥',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            
            const SizedBox(height: 20),
            
            // Ìå®ÌÑ¥ Ï†ïÎ≥¥
            _buildPatternInfo(context, 'ÏïàÏ†ïÏÑ±', stability, _getStabilityColor(stability)),
            const SizedBox(height: 12),
            _buildPatternInfo(context, 'Î≥ÄÎèôÏÑ±', volatility, _getVolatilityColor(volatility)),
            const SizedBox(height: 12),
            _buildPatternInfo(context, 'Ï†ÑÏ≤¥ Ìä∏Î†åÎìú', trend, _getTrendColor(trend)),
            
            if (keyMoments.isNotEmpty) ...[
              const SizedBox(height: 20),
              Text(
                'Ï£ºÏöî ÏàúÍ∞ÑÎì§',
                style: Theme.of(context).textTheme.titleSmall?.copyWith(
                  fontWeight: FontWeight.w600,
                ),
              ),
              const SizedBox(height: 12),
              ...keyMoments.take(3).map((moment) => _buildKeyMoment(context, moment)),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildPatternInfo(BuildContext context, String label, String value, Color color) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(
              Icons.info,
              color: color,
              size: 16,
            ),
            const SizedBox(width: 8),
            Text(
              label,
              style: TextStyle(
                fontWeight: FontWeight.w600,
                color: color,
                fontSize: 14,
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        Text(
          value,
          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
            height: 1.5,
          ),
        ),
      ],
    );
  }

  Widget _buildKeyMoment(BuildContext context, dynamic moment) {
    final description = moment['description'] as String;
    final type = moment['type'] as String;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: BeMoreTheme.surfaceColor,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: BeMoreTheme.borderColor),
      ),
      child: Row(
        children: [
          Icon(
            type == 'emotion_shift' ? Icons.psychology : Icons.trending_up,
            size: 16,
            color: BeMoreTheme.primaryColor,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              description,
              style: Theme.of(context).textTheme.bodySmall,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCBTFeedback(BuildContext context) {
    if (_analysisResult == null) return const SizedBox.shrink();
    
    final cbtFeedback = _analysisResult!['cbtFeedback'] as Map<String, dynamic>;
    final mainAdvice = cbtFeedback['mainAdvice'] as String;
    final explanation = cbtFeedback['explanation'] as String;
    final techniques = cbtFeedback['techniques'] as List<dynamic>;
    final dailyPractice = cbtFeedback['dailyPractice'] as List<dynamic>;
    final emergencyTips = cbtFeedback['emergencyTips'] as List<dynamic>;

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'CBT ÌîºÎìúÎ∞±',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            
            const SizedBox(height: 16),
            
            // Ï£ºÏöî Ï°∞Ïñ∏
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: BeMoreTheme.primaryColor.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: BeMoreTheme.primaryColor.withOpacity(0.3)),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'üí° Ï£ºÏöî Ï°∞Ïñ∏',
                    style: Theme.of(context).textTheme.titleSmall?.copyWith(
                      fontWeight: FontWeight.w600,
                      color: BeMoreTheme.primaryColor,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    mainAdvice,
                    style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                      height: 1.5,
                    ),
                  ),
                ],
              ),
            ),
            
            const SizedBox(height: 16),
            
            // ÏÑ§Î™Ö
            Text(
              explanation,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: BeMoreTheme.textSecondary,
                height: 1.5,
              ),
            ),
            
            const SizedBox(height: 16),
            
            // CBT Í∏∞Î≤ï
            Text(
              'Ï∂îÏ≤ú CBT Í∏∞Î≤ï',
              style: Theme.of(context).textTheme.titleSmall?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 8),
            ...techniques.map((technique) => _buildTechniqueItem(context, technique)),
            
            const SizedBox(height: 16),
            
            // ÏùºÏÉÅ Ïó∞Ïäµ
            Text(
              'ÏùºÏÉÅ Ïó∞Ïäµ',
              style: Theme.of(context).textTheme.titleSmall?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 8),
            ...dailyPractice.map((practice) => _buildPracticeItem(context, practice)),
            
            const SizedBox(height: 16),
            
            // Í∏¥Í∏â ÌåÅ
            Text(
              'Í∏¥Í∏â ÏÉÅÌô© ÎåÄÏ≤òÎ≤ï',
              style: Theme.of(context).textTheme.titleSmall?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            const SizedBox(height: 8),
            ...emergencyTips.map((tip) => _buildEmergencyTip(context, tip)),
          ],
        ),
      ),
    );
  }

  Widget _buildTechniqueItem(BuildContext context, String technique) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: BeMoreTheme.surfaceColor,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: BeMoreTheme.borderColor),
      ),
      child: Row(
        children: [
          Icon(
            Icons.psychology,
            size: 16,
            color: BeMoreTheme.primaryColor,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              technique,
              style: Theme.of(context).textTheme.bodyMedium,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPracticeItem(BuildContext context, String practice) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: BeMoreTheme.surfaceColor,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: BeMoreTheme.borderColor),
      ),
      child: Row(
        children: [
          Icon(
            Icons.schedule,
            size: 16,
            color: BeMoreTheme.successColor,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              practice,
              style: Theme.of(context).textTheme.bodyMedium,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEmergencyTip(BuildContext context, String tip) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: BeMoreTheme.warningColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: BeMoreTheme.warningColor.withOpacity(0.3)),
      ),
      child: Row(
        children: [
          Icon(
            Icons.emergency,
            size: 16,
            color: BeMoreTheme.warningColor,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              tip,
              style: Theme.of(context).textTheme.bodyMedium,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRecommendations(BuildContext context) {
    if (_analysisResult == null) return const SizedBox.shrink();
    
    final recommendations = _analysisResult!['recommendations'] as List<dynamic>;

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Í∞úÏÑ† Ï†úÏïà',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
            
            const SizedBox(height: 16),
            
            ...recommendations.map((rec) => _buildRecommendationItem(context, rec)),
          ],
        ),
      ),
    );
  }

  Widget _buildRecommendationItem(BuildContext context, Map<String, dynamic> recommendation) {
    final title = recommendation['title'] as String;
    final description = recommendation['description'] as String;
    final priority = recommendation['priority'] as String;
    final icon = recommendation['icon'] as String;

    Color priorityColor;
    switch (priority) {
      case 'high':
        priorityColor = BeMoreTheme.errorColor;
        break;
      case 'medium':
        priorityColor = BeMoreTheme.warningColor;
        break;
      default:
        priorityColor = BeMoreTheme.successColor;
    }

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: priorityColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: priorityColor.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Text(
                icon,
                style: const TextStyle(fontSize: 20),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  title,
                  style: Theme.of(context).textTheme.titleSmall?.copyWith(
                    fontWeight: FontWeight.w600,
                    color: priorityColor,
                  ),
                ),
              ),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: priorityColor,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  priority == 'high' ? 'ÎÜíÏùå' : priority == 'medium' ? 'Î≥¥ÌÜµ' : 'ÎÇÆÏùå',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 10,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            description,
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
              height: 1.5,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons(BuildContext context) {
    return Column(
      children: [
        // ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
        SizedBox(
          width: double.infinity,
          child: ElevatedButton(
            onPressed: () {
              Navigator.of(context).pushAndRemoveUntil(
                MaterialPageRoute(builder: (context) => const HomeScreen()),
                (route) => false,
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: BeMoreTheme.primaryColor,
              padding: const EdgeInsets.symmetric(vertical: 16),
            ),
            child: Text(
              'ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                color: Colors.white,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ),
        
        const SizedBox(height: 12),
        
        // ÏÉàÎ°úÏö¥ ÏÉÅÎã¥ ÏãúÏûë
        SizedBox(
          width: double.infinity,
          child: OutlinedButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            style: OutlinedButton.styleFrom(
              padding: const EdgeInsets.symmetric(vertical: 16),
            ),
            child: Text(
              'ÏÉàÎ°úÏö¥ ÏÉÅÎã¥ ÏãúÏûë',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ),
      ],
    );
  }

  String _getEmotionDisplayName(String emotion) {
    switch (emotion) {
      case 'Í∏∞ÏÅ®':
        return 'Í∏∞ÏÅ®';
      case 'ÌèâÏò®':
        return 'ÌèâÏò®';
      case 'Ïä¨Ìîî':
        return 'Ïä¨Ìîî';
      case 'Î∂àÏïà':
        return 'Î∂àÏïà';
      case 'Î∂ÑÎÖ∏':
        return 'Î∂ÑÎÖ∏';
      default:
        return 'Í∏∞ÏÅ®';
    }
  }

  Color _getStabilityColor(String stability) {
    switch (stability) {
      case 'stable':
        return BeMoreTheme.successColor;
      case 'unstable':
        return BeMoreTheme.warningColor;
      default:
        return BeMoreTheme.textSecondary;
    }
  }

  Color _getVolatilityColor(String volatility) {
    switch (volatility) {
      case 'low':
        return BeMoreTheme.successColor;
      case 'medium':
        return BeMoreTheme.warningColor;
      case 'high':
        return BeMoreTheme.errorColor;
      default:
        return BeMoreTheme.textSecondary;
    }
  }

  Color _getTrendColor(String trend) {
    switch (trend) {
      case 'improving':
        return BeMoreTheme.successColor;
      case 'worsening':
        return BeMoreTheme.errorColor;
      case 'stable':
        return BeMoreTheme.primaryColor;
      default:
        return BeMoreTheme.textSecondary;
    }
  }
} 